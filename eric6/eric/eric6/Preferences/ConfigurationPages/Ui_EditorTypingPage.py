# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'eric\eric6\Preferences\ConfigurationPages\EditorTypingPage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_EditorTypingPage(object):
    def setupUi(self, EditorTypingPage):
        EditorTypingPage.setObjectName("EditorTypingPage")
        EditorTypingPage.resize(543, 518)
        EditorTypingPage.setWindowTitle("")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(EditorTypingPage)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.headerLabel = QtWidgets.QLabel(EditorTypingPage)
        self.headerLabel.setObjectName("headerLabel")
        self.verticalLayout_3.addWidget(self.headerLabel)
        self.line1 = QtWidgets.QFrame(EditorTypingPage)
        self.line1.setFrameShape(QtWidgets.QFrame.HLine)
        self.line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line1.setFrameShape(QtWidgets.QFrame.HLine)
        self.line1.setObjectName("line1")
        self.verticalLayout_3.addWidget(self.line1)
        self.hboxlayout = QtWidgets.QHBoxLayout()
        self.hboxlayout.setObjectName("hboxlayout")
        self.TextLabel1_3 = QtWidgets.QLabel(EditorTypingPage)
        self.TextLabel1_3.setToolTip("")
        self.TextLabel1_3.setObjectName("TextLabel1_3")
        self.hboxlayout.addWidget(self.TextLabel1_3)
        self.languageCombo = QtWidgets.QComboBox(EditorTypingPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.languageCombo.sizePolicy().hasHeightForWidth())
        self.languageCombo.setSizePolicy(sizePolicy)
        self.languageCombo.setObjectName("languageCombo")
        self.hboxlayout.addWidget(self.languageCombo)
        self.verticalLayout_3.addLayout(self.hboxlayout)
        self.stackedWidget = QtWidgets.QStackedWidget(EditorTypingPage)
        self.stackedWidget.setObjectName("stackedWidget")
        self.emptyPage = QtWidgets.QWidget()
        self.emptyPage.setObjectName("emptyPage")
        self.stackedWidget.addWidget(self.emptyPage)
        self.pythonPage = QtWidgets.QWidget()
        self.pythonPage.setObjectName("pythonPage")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.pythonPage)
        self.verticalLayout_2.setContentsMargins(0, -1, 0, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pythonGroup = QtWidgets.QGroupBox(self.pythonPage)
        self.pythonGroup.setFocusPolicy(QtCore.Qt.TabFocus)
        self.pythonGroup.setCheckable(True)
        self.pythonGroup.setObjectName("pythonGroup")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.pythonGroup)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pythonInsertClosingBraceCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonInsertClosingBraceCheckBox.setObjectName("pythonInsertClosingBraceCheckBox")
        self.verticalLayout.addWidget(self.pythonInsertClosingBraceCheckBox)
        self.hboxlayout1 = QtWidgets.QHBoxLayout()
        self.hboxlayout1.setObjectName("hboxlayout1")
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.hboxlayout1.addItem(spacerItem)
        self.pythonSkipBraceCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonSkipBraceCheckBox.setEnabled(False)
        self.pythonSkipBraceCheckBox.setObjectName("pythonSkipBraceCheckBox")
        self.hboxlayout1.addWidget(self.pythonSkipBraceCheckBox)
        spacerItem1 = QtWidgets.QSpacerItem(131, 21, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.hboxlayout1.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.hboxlayout1)
        self.pythonColonDetectionCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonColonDetectionCheckBox.setObjectName("pythonColonDetectionCheckBox")
        self.verticalLayout.addWidget(self.pythonColonDetectionCheckBox)
        self.pythonIndentBraceCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonIndentBraceCheckBox.setObjectName("pythonIndentBraceCheckBox")
        self.verticalLayout.addWidget(self.pythonIndentBraceCheckBox)
        self.pythonInsertQuoteCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonInsertQuoteCheckBox.setObjectName("pythonInsertQuoteCheckBox")
        self.verticalLayout.addWidget(self.pythonInsertQuoteCheckBox)
        self.pythonDedentElseCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonDedentElseCheckBox.setObjectName("pythonDedentElseCheckBox")
        self.verticalLayout.addWidget(self.pythonDedentElseCheckBox)
        self.pythonDedentExceptCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonDedentExceptCheckBox.setObjectName("pythonDedentExceptCheckBox")
        self.verticalLayout.addWidget(self.pythonDedentExceptCheckBox)
        self.pythonInsertImportCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonInsertImportCheckBox.setObjectName("pythonInsertImportCheckBox")
        self.verticalLayout.addWidget(self.pythonInsertImportCheckBox)
        self.hboxlayout2 = QtWidgets.QHBoxLayout()
        self.hboxlayout2.setObjectName("hboxlayout2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.hboxlayout2.addItem(spacerItem2)
        self.pythonImportBraceTypeCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonImportBraceTypeCheckBox.setEnabled(False)
        self.pythonImportBraceTypeCheckBox.setObjectName("pythonImportBraceTypeCheckBox")
        self.hboxlayout2.addWidget(self.pythonImportBraceTypeCheckBox)
        spacerItem3 = QtWidgets.QSpacerItem(261, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.hboxlayout2.addItem(spacerItem3)
        self.verticalLayout.addLayout(self.hboxlayout2)
        self.pythonInsertSelfCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonInsertSelfCheckBox.setObjectName("pythonInsertSelfCheckBox")
        self.verticalLayout.addWidget(self.pythonInsertSelfCheckBox)
        self.pythonInsertBlankCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonInsertBlankCheckBox.setObjectName("pythonInsertBlankCheckBox")
        self.verticalLayout.addWidget(self.pythonInsertBlankCheckBox)
        self.pythonDedentDefCheckBox = QtWidgets.QCheckBox(self.pythonGroup)
        self.pythonDedentDefCheckBox.setObjectName("pythonDedentDefCheckBox")
        self.verticalLayout.addWidget(self.pythonDedentDefCheckBox)
        self.verticalLayout_2.addWidget(self.pythonGroup)
        spacerItem4 = QtWidgets.QSpacerItem(507, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem4)
        self.stackedWidget.addWidget(self.pythonPage)
        self.rubyPage = QtWidgets.QWidget()
        self.rubyPage.setObjectName("rubyPage")
        self.vboxlayout = QtWidgets.QVBoxLayout(self.rubyPage)
        self.vboxlayout.setContentsMargins(0, -1, 0, -1)
        self.vboxlayout.setObjectName("vboxlayout")
        self.rubyGroup = QtWidgets.QGroupBox(self.rubyPage)
        self.rubyGroup.setFocusPolicy(QtCore.Qt.TabFocus)
        self.rubyGroup.setCheckable(True)
        self.rubyGroup.setObjectName("rubyGroup")
        self.vboxlayout1 = QtWidgets.QVBoxLayout(self.rubyGroup)
        self.vboxlayout1.setObjectName("vboxlayout1")
        self.rubyInsertClosingBraceCheckBox = QtWidgets.QCheckBox(self.rubyGroup)
        self.rubyInsertClosingBraceCheckBox.setObjectName("rubyInsertClosingBraceCheckBox")
        self.vboxlayout1.addWidget(self.rubyInsertClosingBraceCheckBox)
        self.rubySkipBraceCheckBox = QtWidgets.QCheckBox(self.rubyGroup)
        self.rubySkipBraceCheckBox.setObjectName("rubySkipBraceCheckBox")
        self.vboxlayout1.addWidget(self.rubySkipBraceCheckBox)
        self.rubyIndentBraceCheckBox = QtWidgets.QCheckBox(self.rubyGroup)
        self.rubyIndentBraceCheckBox.setObjectName("rubyIndentBraceCheckBox")
        self.vboxlayout1.addWidget(self.rubyIndentBraceCheckBox)
        self.rubyInsertQuoteCheckBox = QtWidgets.QCheckBox(self.rubyGroup)
        self.rubyInsertQuoteCheckBox.setObjectName("rubyInsertQuoteCheckBox")
        self.vboxlayout1.addWidget(self.rubyInsertQuoteCheckBox)
        self.rubyInsertBlankCheckBox = QtWidgets.QCheckBox(self.rubyGroup)
        self.rubyInsertBlankCheckBox.setObjectName("rubyInsertBlankCheckBox")
        self.vboxlayout1.addWidget(self.rubyInsertBlankCheckBox)
        self.rubyInsertHereDocCheckBox = QtWidgets.QCheckBox(self.rubyGroup)
        self.rubyInsertHereDocCheckBox.setObjectName("rubyInsertHereDocCheckBox")
        self.vboxlayout1.addWidget(self.rubyInsertHereDocCheckBox)
        self.rubyInsertInlineDocCheckBox = QtWidgets.QCheckBox(self.rubyGroup)
        self.rubyInsertInlineDocCheckBox.setObjectName("rubyInsertInlineDocCheckBox")
        self.vboxlayout1.addWidget(self.rubyInsertInlineDocCheckBox)
        self.vboxlayout.addWidget(self.rubyGroup)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.vboxlayout.addItem(spacerItem5)
        self.stackedWidget.addWidget(self.rubyPage)
        self.yamlPage = QtWidgets.QWidget()
        self.yamlPage.setObjectName("yamlPage")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.yamlPage)
        self.verticalLayout_5.setContentsMargins(0, -1, 0, -1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.yamlGroup = QtWidgets.QGroupBox(self.yamlPage)
        self.yamlGroup.setFocusPolicy(QtCore.Qt.TabFocus)
        self.yamlGroup.setCheckable(True)
        self.yamlGroup.setObjectName("yamlGroup")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.yamlGroup)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.yamlInsertClosingBraceCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlInsertClosingBraceCheckBox.setObjectName("yamlInsertClosingBraceCheckBox")
        self.verticalLayout_4.addWidget(self.yamlInsertClosingBraceCheckBox)
        self._2 = QtWidgets.QHBoxLayout()
        self._2.setObjectName("_2")
        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self._2.addItem(spacerItem6)
        self.yamlSkipBraceCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlSkipBraceCheckBox.setEnabled(False)
        self.yamlSkipBraceCheckBox.setObjectName("yamlSkipBraceCheckBox")
        self._2.addWidget(self.yamlSkipBraceCheckBox)
        spacerItem7 = QtWidgets.QSpacerItem(131, 21, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self._2.addItem(spacerItem7)
        self.verticalLayout_4.addLayout(self._2)
        self.yamlColonDetectionCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlColonDetectionCheckBox.setObjectName("yamlColonDetectionCheckBox")
        self.verticalLayout_4.addWidget(self.yamlColonDetectionCheckBox)
        self.yamlAutoIndentationCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlAutoIndentationCheckBox.setObjectName("yamlAutoIndentationCheckBox")
        self.verticalLayout_4.addWidget(self.yamlAutoIndentationCheckBox)
        self.yamlInsertQuoteCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlInsertQuoteCheckBox.setObjectName("yamlInsertQuoteCheckBox")
        self.verticalLayout_4.addWidget(self.yamlInsertQuoteCheckBox)
        self.yamlInsertBlankColonCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlInsertBlankColonCheckBox.setObjectName("yamlInsertBlankColonCheckBox")
        self.verticalLayout_4.addWidget(self.yamlInsertBlankColonCheckBox)
        self.yamlInsertBlankDashCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlInsertBlankDashCheckBox.setObjectName("yamlInsertBlankDashCheckBox")
        self.verticalLayout_4.addWidget(self.yamlInsertBlankDashCheckBox)
        self.yamlInsertBlankQuestionCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlInsertBlankQuestionCheckBox.setObjectName("yamlInsertBlankQuestionCheckBox")
        self.verticalLayout_4.addWidget(self.yamlInsertBlankQuestionCheckBox)
        self.yamlInsertBlankCommaCheckBox = QtWidgets.QCheckBox(self.yamlGroup)
        self.yamlInsertBlankCommaCheckBox.setObjectName("yamlInsertBlankCommaCheckBox")
        self.verticalLayout_4.addWidget(self.yamlInsertBlankCommaCheckBox)
        self.verticalLayout_5.addWidget(self.yamlGroup)
        spacerItem8 = QtWidgets.QSpacerItem(20, 89, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem8)
        self.stackedWidget.addWidget(self.yamlPage)
        self.verticalLayout_3.addWidget(self.stackedWidget)
        spacerItem9 = QtWidgets.QSpacerItem(519, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem9)

        self.retranslateUi(EditorTypingPage)
        self.stackedWidget.setCurrentIndex(0)
        self.pythonInsertClosingBraceCheckBox.toggled['bool'].connect(self.pythonSkipBraceCheckBox.setEnabled)
        self.pythonInsertClosingBraceCheckBox.toggled['bool'].connect(self.pythonSkipBraceCheckBox.setChecked)
        self.pythonInsertImportCheckBox.toggled['bool'].connect(self.pythonImportBraceTypeCheckBox.setEnabled)
        self.yamlInsertClosingBraceCheckBox.toggled['bool'].connect(self.yamlSkipBraceCheckBox.setEnabled)
        self.yamlInsertClosingBraceCheckBox.toggled['bool'].connect(self.yamlSkipBraceCheckBox.setChecked)
        QtCore.QMetaObject.connectSlotsByName(EditorTypingPage)
        EditorTypingPage.setTabOrder(self.languageCombo, self.pythonGroup)
        EditorTypingPage.setTabOrder(self.pythonGroup, self.pythonInsertClosingBraceCheckBox)
        EditorTypingPage.setTabOrder(self.pythonInsertClosingBraceCheckBox, self.pythonSkipBraceCheckBox)
        EditorTypingPage.setTabOrder(self.pythonSkipBraceCheckBox, self.pythonColonDetectionCheckBox)
        EditorTypingPage.setTabOrder(self.pythonColonDetectionCheckBox, self.pythonIndentBraceCheckBox)
        EditorTypingPage.setTabOrder(self.pythonIndentBraceCheckBox, self.pythonInsertQuoteCheckBox)
        EditorTypingPage.setTabOrder(self.pythonInsertQuoteCheckBox, self.pythonDedentElseCheckBox)
        EditorTypingPage.setTabOrder(self.pythonDedentElseCheckBox, self.pythonDedentExceptCheckBox)
        EditorTypingPage.setTabOrder(self.pythonDedentExceptCheckBox, self.pythonInsertImportCheckBox)
        EditorTypingPage.setTabOrder(self.pythonInsertImportCheckBox, self.pythonImportBraceTypeCheckBox)
        EditorTypingPage.setTabOrder(self.pythonImportBraceTypeCheckBox, self.pythonInsertSelfCheckBox)
        EditorTypingPage.setTabOrder(self.pythonInsertSelfCheckBox, self.pythonInsertBlankCheckBox)
        EditorTypingPage.setTabOrder(self.pythonInsertBlankCheckBox, self.pythonDedentDefCheckBox)
        EditorTypingPage.setTabOrder(self.pythonDedentDefCheckBox, self.rubyGroup)
        EditorTypingPage.setTabOrder(self.rubyGroup, self.rubyInsertClosingBraceCheckBox)
        EditorTypingPage.setTabOrder(self.rubyInsertClosingBraceCheckBox, self.rubySkipBraceCheckBox)
        EditorTypingPage.setTabOrder(self.rubySkipBraceCheckBox, self.rubyIndentBraceCheckBox)
        EditorTypingPage.setTabOrder(self.rubyIndentBraceCheckBox, self.rubyInsertQuoteCheckBox)
        EditorTypingPage.setTabOrder(self.rubyInsertQuoteCheckBox, self.rubyInsertBlankCheckBox)
        EditorTypingPage.setTabOrder(self.rubyInsertBlankCheckBox, self.rubyInsertHereDocCheckBox)
        EditorTypingPage.setTabOrder(self.rubyInsertHereDocCheckBox, self.rubyInsertInlineDocCheckBox)

    def retranslateUi(self, EditorTypingPage):
        _translate = QtCore.QCoreApplication.translate
        self.headerLabel.setText(_translate("EditorTypingPage", "<b>Configure typing</b>"))
        self.TextLabel1_3.setText(_translate("EditorTypingPage", "Programming Language:"))
        self.languageCombo.setToolTip(_translate("EditorTypingPage", "Select the programming language to be configured."))
        self.pythonGroup.setToolTip(_translate("EditorTypingPage", "Select to enable Python typing aids"))
        self.pythonGroup.setTitle(_translate("EditorTypingPage", "Enable Python typing aids"))
        self.pythonInsertClosingBraceCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a closing parenthesis"))
        self.pythonInsertClosingBraceCheckBox.setText(_translate("EditorTypingPage", "Automatic parenthesis insertion"))
        self.pythonSkipBraceCheckBox.setToolTip(_translate("EditorTypingPage", "Select to skip matching braces when typing"))
        self.pythonSkipBraceCheckBox.setText(_translate("EditorTypingPage", "Automatically skip matching braces when typing"))
        self.pythonColonDetectionCheckBox.setToolTip(_translate("EditorTypingPage", "Select to skip a \':\', if typed next to another \':\'"))
        self.pythonColonDetectionCheckBox.setText(_translate("EditorTypingPage", "Automatic colon detection"))
        self.pythonIndentBraceCheckBox.setToolTip(_translate("EditorTypingPage", "Select to indent after typing \'return\'"))
        self.pythonIndentBraceCheckBox.setText(_translate("EditorTypingPage", "Automatic indent after \'(\'"))
        self.pythonInsertQuoteCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert the matching quote character"))
        self.pythonInsertQuoteCheckBox.setText(_translate("EditorTypingPage", "Automatic quote insertion"))
        self.pythonDedentElseCheckBox.setToolTip(_translate("EditorTypingPage", "Select to dedent \'else:\' and \'elif\' to the matching \'if\'"))
        self.pythonDedentElseCheckBox.setText(_translate("EditorTypingPage", "Automatic dedent of \'else:\' and \'elif\'"))
        self.pythonDedentExceptCheckBox.setToolTip(_translate("EditorTypingPage", "Select to dedent \'except\' and \'finally\' to the matching \'try:\'"))
        self.pythonDedentExceptCheckBox.setText(_translate("EditorTypingPage", "Automatic dedent of \'except\' and \'finally\'"))
        self.pythonInsertImportCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert the \'import \' string when the line starts with \'from ...\'"))
        self.pythonInsertImportCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of the \'import\' string on \'from xxx\'"))
        self.pythonImportBraceTypeCheckBox.setToolTip(_translate("EditorTypingPage", "Select to create import statements of the form \'from ... import (...)\'"))
        self.pythonImportBraceTypeCheckBox.setText(_translate("EditorTypingPage", "Generate \'(...)\' type import"))
        self.pythonInsertSelfCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert the \'self\' string when declaring a method"))
        self.pythonInsertSelfCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of \'self\' when declaring methods"))
        self.pythonInsertBlankCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a blank after \',\'"))
        self.pythonInsertBlankCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of \' \' (blank) after \',\'"))
        self.pythonDedentDefCheckBox.setToolTip(_translate("EditorTypingPage", "Select to dedent \'def\' statements to the last \'def\' or \'class\'"))
        self.pythonDedentDefCheckBox.setText(_translate("EditorTypingPage", "Automatic dedent of \'def\' statements"))
        self.rubyGroup.setToolTip(_translate("EditorTypingPage", "Select to enable Ruby typing aids"))
        self.rubyGroup.setTitle(_translate("EditorTypingPage", "Enable Ruby typing aids"))
        self.rubyInsertClosingBraceCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a closing parenthesis"))
        self.rubyInsertClosingBraceCheckBox.setText(_translate("EditorTypingPage", "Automatic parenthesis insertion"))
        self.rubySkipBraceCheckBox.setToolTip(_translate("EditorTypingPage", "Select to skip matching braces when typing"))
        self.rubySkipBraceCheckBox.setText(_translate("EditorTypingPage", "Automatically skip matching braces when typing"))
        self.rubyIndentBraceCheckBox.setToolTip(_translate("EditorTypingPage", "Select to indent after typing \'return\'"))
        self.rubyIndentBraceCheckBox.setText(_translate("EditorTypingPage", "Automatic indent after \'(\'"))
        self.rubyInsertQuoteCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert the matching quote character"))
        self.rubyInsertQuoteCheckBox.setText(_translate("EditorTypingPage", "Automatic quote insertion"))
        self.rubyInsertBlankCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a blank after \',\'"))
        self.rubyInsertBlankCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of \' \' (blank) after \',\'"))
        self.rubyInsertHereDocCheckBox.setToolTip(_translate("EditorTypingPage", "Select to automatically complete a here document"))
        self.rubyInsertHereDocCheckBox.setText(_translate("EditorTypingPage", "Automatic completion of here document"))
        self.rubyInsertInlineDocCheckBox.setToolTip(_translate("EditorTypingPage", "Select to automatically insert \'=end\' after entering \'=begin\'"))
        self.rubyInsertInlineDocCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of \'=end\' after \'=begin\'"))
        self.yamlGroup.setToolTip(_translate("EditorTypingPage", "Select to enable YAML typing aids"))
        self.yamlGroup.setTitle(_translate("EditorTypingPage", "Enable YAML typing aids"))
        self.yamlInsertClosingBraceCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a closing parenthesis"))
        self.yamlInsertClosingBraceCheckBox.setText(_translate("EditorTypingPage", "Automatic parenthesis insertion"))
        self.yamlSkipBraceCheckBox.setToolTip(_translate("EditorTypingPage", "Select to skip matching braces when typing"))
        self.yamlSkipBraceCheckBox.setText(_translate("EditorTypingPage", "Automatically skip matching braces when typing"))
        self.yamlColonDetectionCheckBox.setToolTip(_translate("EditorTypingPage", "Select to skip a \':\', if typed next to another \':\'"))
        self.yamlColonDetectionCheckBox.setText(_translate("EditorTypingPage", "Automatic colon detection"))
        self.yamlAutoIndentationCheckBox.setToolTip(_translate("EditorTypingPage", "Select to indent after typing \'return\'"))
        self.yamlAutoIndentationCheckBox.setText(_translate("EditorTypingPage", "Automatic indent after \':\', \'-\', \'|\', \'|-\', \'|+\', \'>\', \'>-\', \'>+\'"))
        self.yamlInsertQuoteCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert the matching quote character"))
        self.yamlInsertQuoteCheckBox.setText(_translate("EditorTypingPage", "Automatic quote insertion"))
        self.yamlInsertBlankColonCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a blank after \':\'"))
        self.yamlInsertBlankColonCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of \' \' (blank) after \':\'"))
        self.yamlInsertBlankDashCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a blank after \'-\'"))
        self.yamlInsertBlankDashCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of \' \' (blank) after \'-\'"))
        self.yamlInsertBlankQuestionCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a blank after \'?\'"))
        self.yamlInsertBlankQuestionCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of \' \' (blank) after \'?\'"))
        self.yamlInsertBlankCommaCheckBox.setToolTip(_translate("EditorTypingPage", "Select to insert a blank after \',\'"))
        self.yamlInsertBlankCommaCheckBox.setText(_translate("EditorTypingPage", "Automatic insertion of \' \' (blank) after \',\'"))
