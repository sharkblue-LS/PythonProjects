array.array.append?4(value)
array.array.extend?4(iterable)
array.array?1(typecode, iterable=None)
btree.BTree.close?4()
btree.BTree.flush?4()
btree.BTree.get?4(key, default=None)
btree.BTree.items?4(start_key=None, end_key=None, flags=0)
btree.BTree.keys?4(start_key=None, end_key=None, flags=0)
btree.BTree.values?4(start_key=None, end_key=None, flags=0)
btree.DESC?7
btree.INCL?7
btree.open?4(stream, *, flags=0, pagesize=0, cachesize=0, minkeypage=0)
cmath.cos?4(z)
cmath.e?7
cmath.exp?4(z)
cmath.log10?4(z)
cmath.log?4(z)
cmath.phase?4(z)
cmath.pi?7
cmath.polar?4(z)
cmath.rect?4(r, phi)
cmath.sin?4(z)
cmath.sqrt?4(z)
esp.SLEEP_LIGHT?7
esp.SLEEP_MODEM?7
esp.SLEEP_NONE?7
esp.deepsleep?4(time=0)
esp.flash_erase?4(sector_no)
esp.flash_id?4()
esp.flash_read?4(byte_offset, length_or_buffer)
esp.flash_size?4()
esp.flash_user_start?4()
esp.flash_write?4(byte_offset, bytes)
esp.set_native_code_location?4(start, length)
esp.sleep_type?4(sleep_type=None)
esp32.Partition.BOOT?7
esp32.Partition.RUNNING?7
esp32.Partition.TYPE_APP?7
esp32.Partition.TYPE_DATA?7
esp32.Partition.find?4(type=TYPE_APP, subtype=0xff, label=None)
esp32.Partition.get_next_update?4()
esp32.Partition.info?4()
esp32.Partition.ioctl?4(cmd, arg)
esp32.Partition.readblocks?4(block_num, buf)
esp32.Partition.set_boot?4()
esp32.Partition.writeblocks?4(block_num, buf)
esp32.Partition?1(id)
esp32.ULP.load_binary?4(load_addr, program_binary)
esp32.ULP.run?4(entry_point)
esp32.ULP.set_wakeup_period?4(period_index, period_us)
esp32.ULP?1()
esp32.WAKEUP_ALL_LOW?7
esp32.WAKEUP_ANY_HIGH?7
esp32.hall_sensor?4()
esp32.raw_temperature?4()
esp32.wake_on_ext0?4(pin, level)
esp32.wake_on_ext1?4(pins, level)
esp32.wake_on_touch?4(wake)
framebuf.FrameBuffer.blit?4(fbuf, x, y, key=None)
framebuf.FrameBuffer.fill?4(c)
framebuf.FrameBuffer.fill_rect?4(x, y, w, h, c)
framebuf.FrameBuffer.hline?4(x, y, w, c)
framebuf.FrameBuffer.line?4(x1, y1, x2, y2, c)
framebuf.FrameBuffer.pixel?4(x, y, c=None)
framebuf.FrameBuffer.rect?4(x, y, w, h, c)
framebuf.FrameBuffer.scroll?4(xstep, ystep)
framebuf.FrameBuffer.text?4(s, x, y, c=None)
framebuf.FrameBuffer.vline?4(x, y, h, c)
framebuf.FrameBuffer?1(buffer, width, height, format, stride=None)
framebuf.GS2_HMSB?7
framebuf.GS4_HMSB?7
framebuf.GS8?7
framebuf.MONO_HLSB?7
framebuf.MONO_HMSB?7
framebuf.MONO_VLSB?7
framebuf.RGB565?7
gc.collect?4()
gc.disable?4()
gc.enable?4()
gc.mem_alloc?4()
gc.mem_free?4()
gc.threshold?4()
gc.threshold?4(amount)
lcd160cr.LANDSCAPE?7
lcd160cr.LANDSCAPE_UPSIDEDOWN?7
lcd160cr.LCD160CR.dot?4(x, y)
lcd160cr.LCD160CR.dot_no_clip?4(x, y)
lcd160cr.LCD160CR.erase?4()
lcd160cr.LCD160CR.fast_spi?4(flush=True)
lcd160cr.LCD160CR.feed_wdt?4()
lcd160cr.LCD160CR.get_line?4(x, y, buf)
lcd160cr.LCD160CR.get_pixel?4(x, y)
lcd160cr.LCD160CR.get_touch?4()
lcd160cr.LCD160CR.is_touched?4()
lcd160cr.LCD160CR.jpeg?4(buf)
lcd160cr.LCD160CR.jpeg_data?4(buf)
lcd160cr.LCD160CR.jpeg_start?4(total_len)
lcd160cr.LCD160CR.line?4(x1, y1, x2, y2)
lcd160cr.LCD160CR.line_no_clip?4(x1, y1, x2, y2)
lcd160cr.LCD160CR.poly_dot?4(data)
lcd160cr.LCD160CR.poly_line?4(data)
lcd160cr.LCD160CR.rect?4(x, y, w, h)
lcd160cr.LCD160CR.rect_interior?4(x, y, w, h)
lcd160cr.LCD160CR.rect_interior_no_clip?4(x, y, w, h)
lcd160cr.LCD160CR.rect_no_clip?4(x, y, w, h)
lcd160cr.LCD160CR.rect_outline?4(x, y, w, h)
lcd160cr.LCD160CR.rect_outline_no_clip?4(x, y, w, h)
lcd160cr.LCD160CR.reset?4()
lcd160cr.LCD160CR.rgb?4(g, b)
lcd160cr.LCD160CR.save_to_flash?4()
lcd160cr.LCD160CR.screen_dump?4(buf, x=0, y=0, w=None, h=None)
lcd160cr.LCD160CR.screen_load?4(buf)
lcd160cr.LCD160CR.set_brightness?4(value)
lcd160cr.LCD160CR.set_font?4(font, scale=0, bold=0, trans=0, scroll=0)
lcd160cr.LCD160CR.set_i2c_addr?4(addr)
lcd160cr.LCD160CR.set_orient?4(orient)
lcd160cr.LCD160CR.set_pen?4(line, fill)
lcd160cr.LCD160CR.set_pixel?4(x, y, c)
lcd160cr.LCD160CR.set_pos?4(x, y)
lcd160cr.LCD160CR.set_power?4(on)
lcd160cr.LCD160CR.set_scroll?4(on)
lcd160cr.LCD160CR.set_scroll_buf?4(s)
lcd160cr.LCD160CR.set_scroll_win?4(win, x=-1, y=0, w=0, h=0, vec=0, pat=0, fill=0x07e0, color=0)
lcd160cr.LCD160CR.set_scroll_win_param?4(win, param, value)
lcd160cr.LCD160CR.set_spi_win?4(x, y, w, h)
lcd160cr.LCD160CR.set_startup_deco?4(value)
lcd160cr.LCD160CR.set_text_color?4(fg, bg)
lcd160cr.LCD160CR.set_uart_baudrate?4(baudrate)
lcd160cr.LCD160CR.show_framebuf?4(buf)
lcd160cr.LCD160CR.touch_config?4(calib=False, save=False, irq=None)
lcd160cr.LCD160CR.write?4(s)
lcd160cr.LCD160CR?1(connect=None, *, pwr=None, i2c=None, spi=None, i2c_addr=98)
lcd160cr.PORTRAIT?7
lcd160cr.PORTRAIT_UPSIDEDOWN?7
lcd160cr.STARTUP_DECO_INFO?7
lcd160cr.STARTUP_DECO_MLOGO?7
lcd160cr.STARTUP_DECO_NONE?7
machine.ADC.channel?4(id, *, pin)
machine.ADC.deinit?4()
machine.ADC.init?4()
machine.ADC?1(id=0, *, bits=12)
machine.ADCChannel.deinit?4()
machine.ADCChannel.init?4()
machine.ADCChannel.value?4()
machine.DEEPSLEEP?7
machine.DEEPSLEEP_RESET?7
machine.HARD_RESET?7
machine.I2C.deinit?4()
machine.I2C.init?4(scl, sda, *, freq=400000)
machine.I2C.readfrom?4(addr, nbytes, stop=True)
machine.I2C.readfrom_into?4(addr, buf, stop=True)
machine.I2C.readfrom_mem?4(addr, memaddr, nbytes, *, addrsize=8)
machine.I2C.readfrom_mem_into?4(addr, memaddr, buf, *, addrsize=8)
machine.I2C.readinto?4(buf, nack=True)
machine.I2C.scan?4()
machine.I2C.start?4()
machine.I2C.stop?4()
machine.I2C.write?4(buf)
machine.I2C.writeto?4(addr, buf, stop=True)
machine.I2C.writeto_mem?4(addr, memaddr, buf, *, addrsize=8)
machine.I2C.writevto?4(addr, vector, stop=True)
machine.I2C?1(id=-1, *, scl, sda, freq=400000)
machine.IDLE?7
machine.PIN_WAKE?7
machine.PWRON_RESET?7
machine.Pin.ALT?7
machine.Pin.ALT_OPEN_DRAIN?7
machine.Pin.HIGH_POWER?7
machine.Pin.IN?7
machine.Pin.IRQ_FALLING?7
machine.Pin.IRQ_HIGH_LEVEL?7
machine.Pin.IRQ_LOW_LEVEL?7
machine.Pin.IRQ_RISING?7
machine.Pin.LOW_POWER?7
machine.Pin.MED_POWER?7
machine.Pin.OPEN_DRAIN?7
machine.Pin.OUT?7
machine.Pin.PULL_DOWN?7
machine.Pin.PULL_HOLD?7
machine.Pin.PULL_UP?7
machine.Pin.drive?4(drive=None)
machine.Pin.init?4(mode=-1, pull=-1, *, value, drive, alt)
machine.Pin.irq?4(handler=None, trigger=(IRQ_FALLING | IRQ_RISING), *, priority=1, wake=None, hard=False)
machine.Pin.mode?4(mode=-1)
machine.Pin.off?4()
machine.Pin.on?4()
machine.Pin.pull?4(pull=-1)
machine.Pin.value?4(x=None)
machine.Pin?1(id, mode=-1, pull=-1, *, value, drive, alt)
machine.RTC.ALARM0?7
machine.RTC.alarm?4(id, time, *, repeat=False)
machine.RTC.alarm_left?4(alarm_id=0)
machine.RTC.cancel?4(alarm_id=0)
machine.RTC.deinit?4()
machine.RTC.init?4(datetime)
machine.RTC.irq?4(*, trigger, handler=None, wake=IDLE)
machine.RTC.now?4()
machine.RTC?1(id=0, datetime=None)
machine.RTC_WAKE?7
machine.SD.deinit?4()
machine.SD.init?4(id=0, pins=('GP10', 'GP11', 'GP15'))
machine.SD?1(id=0, pins=('GP10', 'GP11', 'GP15'))
machine.SDcard?1(lot=1, width=1, cd=None, wp=None, sck=None, miso=None, mosi=None, cs=None)
machine.SLEEP?7
machine.SOFT_RESET?7
machine.SPI.LSB?7
machine.SPI.MASTER?7
machine.SPI.MSB?7
machine.SPI.deinit?4()
machine.SPI.init?4(baudrate=1000000, *, polarity=0, phase=0, bits=8, firstbit=MSB, sck=None, mosi=None, miso=None, pins=("SCK", "MOSI", "MISO"))
machine.SPI.read?4(nbytes, write=0x00)
machine.SPI.readinto?4(buf, write=0x00)
machine.SPI.write?4(buf)
machine.SPI.write_readinto?4(write_buf, read_buf)
machine.SPI?1(id, baudrate=1000000, *, polarity=0, phase=0, bits=8, firstbit=MSB, sck=None, mosi=None, miso=None, pins=("SCK", "MOSI", "MISO"))
machine.Signal.off?4()
machine.Signal.on?4()
machine.Signal.value?4(x=None)
machine.Signal?1(pin, *, invert=False)
machine.Timer.ONE_SHOT?7
machine.Timer.PERIODIC?7
machine.Timer.deinit?4()
machine.Timer.init?4(*, mode=PERIODIC, period=-1, callback=None)
machine.Timer?1(id, *, mode=PERIODIC, period=-1, callback=None)
machine.TimerChannel.duty_cycle?4(value=None)
machine.TimerChannel.freq?4(value=None)
machine.TimerChannel.irq?4(*, trigger, priority=1, handler=None)
machine.TimerChannel.period?4(value=None)
machine.TimerWiPy.MATCH?7
machine.TimerWiPy.NEGATIVE?7
machine.TimerWiPy.ONE_SHOT?7
machine.TimerWiPy.PERIODIC?7
machine.TimerWiPy.POSITIVE?7
machine.TimerWiPy.PWM?7
machine.TimerWiPy.TIMEOUT?7
machine.TimerWiPy.channel?4(channel, *, freq, period, polarity=POSITIVE, duty_cycle=0)
machine.TimerWiPy.deinit?4()
machine.TimerWiPy.init?4(mode, *, width=16)
machine.TimerWiPy?1(id, mode=None, *, width=16)
machine.UART.RX_ANY?7
machine.UART.any?4()
machine.UART.deinit?4()
machine.UART.init?4(bits=8, parity=None, stop=1, **kwargs)
machine.UART.irq?4(trigger, priority=1, handler=None, wake=IDLE)
machine.UART.read?4(nbytes=None)
machine.UART.readinto?4(buf, nbytes=None)
machine.UART.readline?4()
machine.UART.sendbreak?4()
machine.UART.write?4(buf)
machine.UART?1(id, baudrate=9600, bits=8, parity=None, stop=1, **kwargs)
machine.WDT.feed?4()
machine.WDT?1(id=0, timeout=5000)
machine.WDT_RESET?7
machine.WLAN_WAKE?7
machine.adcchannel?4()
machine.deepsleep?4(time_ms=None)
machine.disable_irq?4()
machine.enable_irq?4(state)
machine.freq?4()
machine.idle?4()
machine.lightsleep?4(time_ms=None)
machine.reset?4()
machine.reset_cause?4()
machine.rng?4()
machine.sleep?4()
machine.time_pulse_us?4(pin, pulse_level, timeout_us=1000000)
machine.unique_id?4()
machine.wake_reason?4()
math.acos?4(x)
math.acosh?4(x)
math.asin?4(x)
math.asinh?4(x)
math.atan2?4(y, x)
math.atan?4(x)
math.atanh?4(x)
math.ceil?4(x)
math.copysign?4(x, y)
math.cos?4(x)
math.cosh?4(x)
math.degrees?4(x)
math.e?7
math.erf?4(x)
math.erfc?4(x)
math.exp?4(x)
math.expm1?4(x)
math.fabs?4(x)
math.floor?4(x)
math.fmod?4(x, y)
math.frexp?4(x)
math.gamma?4(x)
math.isfinite?4(x)
math.isinf?4(x)
math.isnan?4(x)
math.ldexp?4(x, exp)
math.lgamma?4(x)
math.log10?4(x)
math.log2?4(x)
math.log?4(x)
math.modf?4(x)
math.pi?7
math.pow?4(x, y)
math.radians?4(x)
math.sin?4(x)
math.sinh?4(x)
math.sqrt?4(x)
math.tan?4(x)
math.tanh?4(x)
math.trunc?4(x)
micropython.alloc_emergency_exception_buf?4(size)
micropython.const?4(expr)
micropython.heap_lock?4()
micropython.heap_unlock?4()
micropython.kbd_intr?4(chr)
micropython.mem_info?4(verbose=False)
micropython.opt_level?4(level=None)
micropython.qstr_info?4(verbose=False)
micropython.schedule?4(func, arg)
micropython.stack_use?4()
network.AP_IF?7
network.AUTH_OPEN?7
network.AUTH_WEP?7
network.AUTH_WPA2_PSK?7
network.AUTH_WPA_PSK?7
network.AUTH_WPA_WPA2_PSK?7
network.AbstractNIC.active?4(is_active=None)
network.AbstractNIC.config?4(**params)
network.AbstractNIC.connect?4(service_id=None, key=None, *args)
network.AbstractNIC.disconnect?4()
network.AbstractNIC.ifconfig?4(params=tuple())
network.AbstractNIC.isconnected?4()
network.AbstractNIC.scan?4(*args)
network.AbstractNIC.status?4(param=None)
network.AbstractNIC?1(id=None)
network.CC3K.WEP?7
network.CC3K.WPA2?7
network.CC3K.WPA?7
network.CC3K.connect?4(ssid, key=None, *, security=WPA2, bssid=None)
network.CC3K.disconnect?4()
network.CC3K.ifconfig?4()
network.CC3K.isconnected?4()
network.CC3K.patch_program?4(pgm)
network.CC3K.patch_version?4()
network.CC3K?1(spi, pin_cs, pin_en, pin_irq)
network.MODE_11B?7
network.MODE_11G?7
network.MODE_11N?7
network.STAT_CONNECTING?7
network.STAT_CONNECT_FAIL?7
network.STAT_GOT_IP?7
network.STAT_IDLE?7
network.STAT_NO_AP_FOUND?7
network.STAT_WRONG_PASSWORD?7
network.STA_IF?7
network.WIZNET5K.ifconfig?4(params=tuple())
network.WIZNET5K.isconnected?4()
network.WIZNET5K.regs?4()
network.WIZNET5K?1(spi, pin_cs, pin_rst)
network.WLAN.active?4(is_active=None)
network.WLAN.config?4(**params)
network.WLAN.connect?4(ssid=None, password=None, *, bssid=None)
network.WLAN.disconnect?4()
network.WLAN.ifconfig?4(params=tuple())
network.WLAN.isconnected?4()
network.WLAN.scan?4()
network.WLAN.status?4(param=None)
network.WLAN?1(interface_id)
network.WLANWiPy.AP?7
network.WLANWiPy.EXT_ANT?7
network.WLANWiPy.INT_ANT?7
network.WLANWiPy.STA?7
network.WLANWiPy.WEP?7
network.WLANWiPy.WPA2?7
network.WLANWiPy.WPA?7
network.WLANWiPy.antenna?4(antenna=None)
network.WLANWiPy.auth?4(auth=None)
network.WLANWiPy.channel?4(channel=None)
network.WLANWiPy.connect?4(ssid, *, auth=None, bssid=None, timeout=None)
network.WLANWiPy.disconnect?4()
network.WLANWiPy.ifconfig?4(if_id=0, config="dhcp")
network.WLANWiPy.init?4(mode, *, ssid, auth, channel, antenna)
network.WLANWiPy.irq?4(*, handler, wake)
network.WLANWiPy.isconnected?4()
network.WLANWiPy.mac?4(mac_addr=None)
network.WLANWiPy.mode?4(mode=None)
network.WLANWiPy.scan?4()
network.WLANWiPy.ssid?4(ssid=None)
network.WLANWiPy?1(id=0, **args)
network.phy_mode?4(mode=None)
pyb.ADC.read?4()
pyb.ADC.read_timed?4(buf, timer)
pyb.ADC.read_timed_multi?4(adcs, bufs, timer)
pyb.ADC?1(pin)
pyb.Accel.filtered_xyz?4()
pyb.Accel.tilt?4()
pyb.Accel.x?4()
pyb.Accel.y?4()
pyb.Accel.z?4()
pyb.Accel?1()
pyb.CAN.BUS_OFF?7
pyb.CAN.ERROR_ACTIVE?7
pyb.CAN.ERROR_PASSIVE?7
pyb.CAN.ERROR_WARNING?7
pyb.CAN.LIST16?7
pyb.CAN.LIST32?7
pyb.CAN.LOOPBACK?7
pyb.CAN.MASK16?7
pyb.CAN.MASK32?7
pyb.CAN.NORMAL?7
pyb.CAN.SILENT?7
pyb.CAN.SILENT_LOOPBACK?7
pyb.CAN.STOPPED?7
pyb.CAN.any?4(fifo)
pyb.CAN.clearfilter?4(bank)
pyb.CAN.deinit?4()
pyb.CAN.info?4(list=None)
pyb.CAN.init?4(mode, extframe=False, prescaler=100, *, sjw=1, bs1=6, bs2=8, auto_restart=False)
pyb.CAN.initfilterbanks?4(nr)
pyb.CAN.recv?4(fifo, list=None, *, timeout=5000)
pyb.CAN.restart?4()
pyb.CAN.rxcallback?4(fifo, fun)
pyb.CAN.send?4(data, id, *, timeout=0, rtr=False)
pyb.CAN.setfilter?4(bank, mode, fifo, params, *, rtr)
pyb.CAN.state?4()
pyb.CAN?1(bus, mode, extframe=False, prescaler=100, *, sjw=1, bs1=6, bs2=8, auto_restart=False)
pyb.DAC.CIRCULAR?7
pyb.DAC.NORMAL?7
pyb.DAC.deinit?4()
pyb.DAC.init?4(bits=8, *, buffering=None)
pyb.DAC.noise?4(freq)
pyb.DAC.triangle?4(freq)
pyb.DAC.write?4(value)
pyb.DAC.write_timed?4(data, freq, *, mode=NORMAL)
pyb.DAC?1(port, bits=8, *, buffering=None)
pyb.ExtInt.IRQ_FALLING?7
pyb.ExtInt.IRQ_RISING?7
pyb.ExtInt.IRQ_RISING_FALLING?7
pyb.ExtInt.disable?4()
pyb.ExtInt.enable?4()
pyb.ExtInt.line?4()
pyb.ExtInt.regs?4()
pyb.ExtInt.swint?4()
pyb.ExtInt?1(pin, mode, pull, callback)
pyb.I2C.MASTER?7
pyb.I2C.SLAVE?7
pyb.I2C.deinit?4()
pyb.I2C.init?4(mode, *, addr=0x12, baudrate=400000, gencall=False, dma=False)
pyb.I2C.is_ready?4(addr)
pyb.I2C.mem_read?4(data, addr, memaddr, *, timeout=5000, addr_size=8)
pyb.I2C.mem_write?4(data, addr, memaddr, *, timeout=5000, addr_size=8)
pyb.I2C.recv?4(recv, addr=0x00, *, timeout=5000)
pyb.I2C.scan?4()
pyb.I2C.send?4(send, addr=0x00, *, timeout=5000)
pyb.I2C?1(bus, mode=None, *, addr=0x12, baudrate=400000, gencall=False, dma=False)
pyb.LCD.command?4(instr_data, buf)
pyb.LCD.contrast?4(value)
pyb.LCD.fill?4(colour)
pyb.LCD.get?4(x, y)
pyb.LCD.light?4(value)
pyb.LCD.pixel?4(x, y, colour)
pyb.LCD.show?4()
pyb.LCD.text?4(text, x, y, colour)
pyb.LCD.write?4(text)
pyb.LCD?1(skin_position)
pyb.LED.intensity?4(value=None)
pyb.LED.off?4()
pyb.LED.on?4()
pyb.LED.toggle?4()
pyb.LED?1(id)
pyb.Pin.AF_OD?7
pyb.Pin.AF_PP?7
pyb.Pin.ANALOG?7
pyb.Pin.IN?7
pyb.Pin.OUT_OD?7
pyb.Pin.OUT_PP?7
pyb.Pin.PULL_DOWN?7
pyb.Pin.PULL_NONE?7
pyb.Pin.PULL_UP?7
pyb.Pin.af?4()
pyb.Pin.af_list?4()
pyb.Pin.debug?4(state=None)
pyb.Pin.dict?4(dict=None)
pyb.Pin.gpio?4()
pyb.Pin.init?4(mode, pull=PULL_NONE, af=-1)
pyb.Pin.mapper?4(fun=None)
pyb.Pin.mode?4()
pyb.Pin.name?4()
pyb.Pin.names?4()
pyb.Pin.pin?4()
pyb.Pin.port?4()
pyb.Pin.pull?4()
pyb.Pin.value?4(value=None)
pyb.Pin?1(id, mode, pull=PULL_NONE, af=-1)
pyb.RTC.calibration?4(cal)
pyb.RTC.datetime?4(datetimetuple=None)
pyb.RTC.info?4()
pyb.RTC.wakeup?4(timeout, callback=None)
pyb.RTC?1()
pyb.SPI.LSB?7
pyb.SPI.MASTER?7
pyb.SPI.MSB?7
pyb.SPI.SLAVE?7
pyb.SPI.deinit?4()
pyb.SPI.init?4(mode, baudrate=328125, *, prescaler, polarity=1, phase=0, bits=8, firstbit=MSB, ti=False, crc=None)
pyb.SPI.recv?4(recv, *, timeout=5000)
pyb.SPI.send?4(send, *, timeout=5000)
pyb.SPI.send_recv?4(send, recv=None, *, timeout=5000)
pyb.SPI?1(bus, mode=None, baudrate=328125, *, prescaler, polarity=1, phase=0, bits=8, firstbit=MSB, ti=False, crc=None)
pyb.Servo.angle?4(angle=None, time=0)
pyb.Servo.calibration?4(pulse_min=None, pulse_max=None, pulse_centre=None, pulse_angle_90=None, pulse_speed_100=None)
pyb.Servo.pulse_width?4(value=None)
pyb.Servo.speed?4(speed=None, time=0)
pyb.Servo?1(id)
pyb.Switch.callback?4(fun)
pyb.Switch.value?4()
pyb.Switch?1()
pyb.Timer.BOTH?7
pyb.Timer.ENC_A?7
pyb.Timer.ENC_AB?7
pyb.Timer.ENC_B?7
pyb.Timer.FALLING?7
pyb.Timer.HIGH?7
pyb.Timer.IC?7
pyb.Timer.LOW?7
pyb.Timer.OC_ACTIVE?7
pyb.Timer.OC_FORCED_ACTIVE?7
pyb.Timer.OC_FORCED_INACTIVE?7
pyb.Timer.OC_INACTIVE?7
pyb.Timer.OC_TIMING?7
pyb.Timer.OC_TOGGLE?7
pyb.Timer.PWM?7
pyb.Timer.PWM_INVERTED?7
pyb.Timer.RISING?7
pyb.Timer.callback?4(fun)
pyb.Timer.channel?4(channel, mode, **kwargs)
pyb.Timer.counter?4(value=None)
pyb.Timer.deinit?4()
pyb.Timer.freq?4(value=None)
pyb.Timer.init?4(*, freq, prescaler, period)
pyb.Timer.period?4(value=None)
pyb.Timer.prescaler?4(value=None)
pyb.Timer.source_freq?4()
pyb.Timer?1(id, *, freq, prescaler, period)
pyb.TimerChannel.callback?4(fun)
pyb.TimerChannel.capture?4(value=None)
pyb.TimerChannel.compare?4(value=None)
pyb.TimerChannel.pulse_width?4(value=None)
pyb.TimerChannel.pulse_width_percent?4(value=None)
pyb.UART.CTS?7
pyb.UART.RTS?7
pyb.UART.any?4()
pyb.UART.deinit?4()
pyb.UART.init?4(baudrate, bits=8, parity=None, stop=1, *, timeout=0, flow=0, timeout_char=0, read_buf_len=64)
pyb.UART.read?4(nbytes=None)
pyb.UART.readchar?4()
pyb.UART.readinto?4(buf, nbytes=None)
pyb.UART.readline?4()
pyb.UART.sendbreak?4()
pyb.UART.write?4(buf)
pyb.UART.writechar?4(char)
pyb.UART?1(bus, baudrate=None, bits=8, parity=None, stop=1, *, timeout=0, flow=0, timeout_char=0, read_buf_len=64)
pyb.USB_HID.recv?4(data, *, timeout=5000)
pyb.USB_HID.send?4(data)
pyb.USB_HID?1()
pyb.USB_VCP.any?4()
pyb.USB_VCP.close?4()
pyb.USB_VCP.isconnected?4()
pyb.USB_VCP.read?4(nbytes=None)
pyb.USB_VCP.readinto?4(buf, maxlen=None)
pyb.USB_VCP.readline?4()
pyb.USB_VCP.readlines?4()
pyb.USB_VCP.recv?4(data, *, timeout=5000)
pyb.USB_VCP.send?4(data, *, timeout=5000)
pyb.USB_VCP.setinterrupt?4(chr)
pyb.USB_VCP.write?4(buf)
pyb.USB_VCP?1()
pyb.bootloader?4()
pyb.delay?4(ms)
pyb.disable_irq?4()
pyb.elapsed_micros?4(start)
pyb.elapsed_millis?4(start)
pyb.enable_irq?4(state=True)
pyb.fault_debug?4(value)
pyb.freq?4(sysclk=None, hclk=None, pclk1=None, pclk2=None)
pyb.hard_reset?4()
pyb.have_cdc?4()
pyb.hid?4(buttons, x, y, z)
pyb.hid_keyboard?7
pyb.hid_mouse?7
pyb.info?4(dump_alloc_table=None)
pyb.main?4(filename)
pyb.micros?4()
pyb.millis?4()
pyb.mount?4(device, mountpoint, *, readonly=False, mkfs=False)
pyb.repl_uart?4(uart)
pyb.rng?4()
pyb.standby?4()
pyb.stop?4()
pyb.sync?4()
pyb.udelay?4(us)
pyb.unique_id?4()
pyb.usb_mode?4(modestr=None, vid=0xf055, pid=0x9801, hid=hid_mouse)
pyb.wfi?4()
sys.argv?7
sys.atexit?4(func)
sys.byteorder?7
sys.exit?4(retval=0)
sys.implementation?7
sys.maxsize?7
sys.modules?7
sys.path?7
sys.platform?7
sys.print_exception?4(exc, file=sys.stdout)
sys.stderr?7
sys.stdin?7
sys.stdout?7
sys.version?7
sys.version_info?7
ubinascii.a2b_base64?4(data)
ubinascii.b2a_base64?4(data)
ubinascii.hexlify?4(data, sep="")
ubinascii.unhexlify?4(data)
ucollections.OrderedDict?1(iterableOfKeyValue)
ucollections.deque.append?4(x)
ucollections.deque.popleft?4()
ucollections.deque?1(iterable, maxlen, flags=0)
ucollections.namedtuple?1(name, fields)
ucryptolib.MODE_CBC?7
ucryptolib.MODE_CTR?7
ucryptolib.MODE_ECB?7
ucryptolib.aes.decrypt?4(in_buf, out_buf=None)
ucryptolib.aes.encrypt?4(in_buf, out_buf=None)
ucryptolib.aes?1(key, mode, IV=None)
uctypes.ARRAY?7
uctypes.BIG_ENDIAN?7
uctypes.FLOAT32?7
uctypes.FLOAT64?7
uctypes.INT16?7
uctypes.INT32?7
uctypes.INT64?7
uctypes.INT8?7
uctypes.LITTLE_ENDIAN?7
uctypes.NATIVE?7
uctypes.PTR?7
uctypes.UINT16?7
uctypes.UINT32?7
uctypes.UINT64?7
uctypes.UINT8?7
uctypes.VOID?7
uctypes.addressof?4(obj)
uctypes.bytearray_at?4(addr, size)
uctypes.bytes_at?4(addr, size)
uctypes.sizeof?4(struct, layout_type=NATIVE)
uctypes.struct?1(addr, descriptor, layout_type=NATIVE)
uerrno.EACCES?7
uerrno.EADDRINUSE?7
uerrno.EAGAIN?7
uerrno.EALREADY?7
uerrno.EBADF?7
uerrno.ECONNABORTED?7
uerrno.ECONNREFUSED?7
uerrno.ECONNRESET?7
uerrno.EEXIST?7
uerrno.EHOSTUNREACH?7
uerrno.EINPROGRESS?7
uerrno.EINVAL?7
uerrno.EIO?7
uerrno.EISDIR?7
uerrno.ENOBUFS?7
uerrno.ENODEV?7
uerrno.ENOENT?7
uerrno.ENOMEM?7
uerrno.ENOTCONN?7
uerrno.EOPNOTSUPP?7
uerrno.EPERM?7
uerrno.ETIMEDOUT?7
uerrno.errorcode?7
uhashlib.md5.digest?4()
uhashlib.md5.update?4(data)
uhashlib.md5?1(data=bytes())
uhashlib.sha1.digest?4()
uhashlib.sha1.update?4(data)
uhashlib.sha1?1(data=bytes())
uhashlib.sha256.digest?4()
uhashlib.sha256.update?4(data)
uhashlib.sha256?1(data=bytes())
uheapq.heapify?4(x)
uheapq.heappop?4(heap)
uheapq.heappush?4(heap, item)
uio.BytesIO.close?4()
uio.BytesIO.flush?4()
uio.BytesIO.getvalue?4()
uio.BytesIO.read?4(size=-1)
uio.BytesIO.readinto?4(b)
uio.BytesIO.readline?4(size=-1)
uio.BytesIO.seek?4(offset, whence=0)
uio.BytesIO.write?4(b)
uio.BytesIO?1(initial_value=b"")
uio.FileIO.close?4()
uio.FileIO.flush?4()
uio.FileIO.read?4(size=-1)
uio.FileIO.readinto?4(b)
uio.FileIO.readline?4(size=-1)
uio.FileIO.readlines?4(hint=-1)
uio.FileIO.seek?4(offset, whence=0)
uio.FileIO.tell?4()
uio.FileIO.write?4(b)
uio.FileIO?1(name, mode='r', **kwargs)
uio.StringIO.close?4()
uio.StringIO.flush?4()
uio.StringIO.getvalue?4()
uio.StringIO.read?4(size=-1)
uio.StringIO.readinto?4(b)
uio.StringIO.readline?4(size=-1)
uio.StringIO.seek?4(offset, whence=0)
uio.StringIO.write?4(s)
uio.StringIO?1(initial_value="")
uio.TextIOWrapper.close?4()
uio.TextIOWrapper.flush?4()
uio.TextIOWrapper.read?4(size=-1)
uio.TextIOWrapper.readinto?4(b)
uio.TextIOWrapper.readline?4(size=-1)
uio.TextIOWrapper.readlines?4(hint=-1)
uio.TextIOWrapper.seek?4(offset, whence=0)
uio.TextIOWrapper.tell?4()
uio.TextIOWrapper.write?4(s)
uio.TextIOWrapper?1(name, mode='r', **kwargs)
uio.open?4(name, mode='r', **kwargs)
ujson.dump?4(obj, stream)
ujson.dumps?4(obj)
ujson.load?4(stream)
ujson.loads?4(string)
uos.AbstractBlockDev.ioctl?4(op, arg)
uos.AbstractBlockDev.readblocks?4(block_num, buf)
uos.AbstractBlockDev.writeblocks?4(block_num, buf)
uos.AbstractBlockDev?1()
uos.VfsFat.mkfs?4()
uos.VfsFat?1(block_dev)
uos.chdir?4(path)
uos.dupterm?4(stream_object, index=0)
uos.getcwd?4()
uos.ilistdir?4(dir=".")
uos.listdir?4(dir=".")
uos.mkdir?4(path)
uos.mount?4(fsobj, mount_point, *, readonly)
uos.remove?4(path)
uos.rename?4(old_path, new_path)
uos.rmdir?4(path)
uos.stat?4(path)
uos.statvfs?4(path)
uos.sync?4()
uos.umount?4(mount_point)
uos.uname?4()
uos.urandom?4(n)
ure.DEBUG?7
ure.compile?4(regex_str, flags=0)
ure.match?4(regex_str, string)
ure.match_object.end?4(index=0)
ure.match_object.group?4(index)
ure.match_object.groups?4()
ure.match_object.span?4(index=0)
ure.match_object.start?4(index=0)
ure.regex_object.match?4(string)
ure.regex_object.search?4(string)
ure.regex_object.split?4(string, max_split=-1)
ure.regex_object.sub?4(replace, string, count=0, flags=0)
ure.search?4(regex_str, string)
ure.sub?4(regex_str, replace, string, count=0, flags=0)
uselect.POLLERR?7
uselect.POLLHUP?7
uselect.POLLIN?7
uselect.POLLOUT?7
uselect.Poll.ipoll?4(timeout=-1, flags=0)
uselect.Poll.modify?4(obj, eventmask)
uselect.Poll.poll?4(timeout=-1)
uselect.Poll.register?4(obj, eventmask = POLLIN | POLLOUT)
uselect.Poll.unregister?4(obj)
uselect.poll?4()
uselect.select?4(rlist, wlist, xlist, timeout=-1)
usocket.AF_INET6?7
usocket.AF_INET?7
usocket.IPPROTO_IP?7
usocket.IPPROTO_TCP?7
usocket.IPPROTO_UDP?7
usocket.IP_ADD_MEMBERSHIP?7
usocket.SOCK_DGRAM?7
usocket.SOCK_RAW?7
usocket.SOCK_STREAM?7
usocket.SOL_SOCKET?7
usocket.SO_REUSEADDR?7
usocket.Socket.accept?4()
usocket.Socket.bind?4(address)
usocket.Socket.close?4()
usocket.Socket.connect?4(address)
usocket.Socket.listen?4(backlog=None)
usocket.Socket.makefile?4(mode='rb', buffering=0)
usocket.Socket.read?4(size=None)
usocket.Socket.readinto?4(buf, nbytes=None)
usocket.Socket.readline?4()
usocket.Socket.recv?4(bufsize)
usocket.Socket.recvfrom?4(bufsize)
usocket.Socket.send?4(bytes)
usocket.Socket.sendall?4(bytes)
usocket.Socket.sendto?4(bytes, address)
usocket.Socket.setblocking?4(flag)
usocket.Socket.setsockopt?4(level, optname, value)
usocket.Socket.settimeout?4(value)
usocket.Socket.write?4(buf)
usocket.getaddrinfo?4(host, port, af=0, type=0, proto=0, flags=0)
usocket.inet_ntop?4(af, bin_addr)
usocket.inet_pton?4(af, txt_addr)
usocket.socket?4(af=AF_INET, type=SOCK_STREAM, proto=IPPROTO_TCP)
ussl.CERT_NONE?7
ussl.CERT_OPTIONAL?7
ussl.CERT_REQUIRED?7
ussl.wrap_socket?4(sock, server_side=False, keyfile=None, certfile=None, cert_reqs=CERT_NONE, ca_certs=None)
ustruct.calcsize?4(fmt)
ustruct.pack?4(fmt, *variables)
ustruct.pack_into?4(fmt, buffer, offset, *variables)
ustruct.unpack?4(fmt, data)
ustruct.unpack_from?4(fmt, data, offset=0)
utime.localtime?4(secs=None)
utime.sleep?4(seconds)
utime.sleep_ms?4(ms)
utime.sleep_us?4(us)
utime.ticks_add?4(ticks, delta)
utime.ticks_cpu?4()
utime.ticks_diff?4(ticks1, ticks2)
utime.ticks_ms?4()
utime.ticks_us?4()
utime.time?4()
uzlib.DecompIO?1(stream, wbits=0)
uzlib.decompress?4(data, wbits=0, bufsize=0)
wipy.heartbeat?4(enable=None)
